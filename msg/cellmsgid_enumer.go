// Code generated by "enumer -type=CellMsgID"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const _CellMsgIDName = "CellMsgID_StartCellMsgID_PlayerLoginCellMsgID_PlayerLogoutCellMsgID_End"

var _CellMsgIDIndex = [...]uint8{0, 15, 36, 58, 71}

const _CellMsgIDLowerName = "cellmsgid_startcellmsgid_playerlogincellmsgid_playerlogoutcellmsgid_end"

func (i CellMsgID) String() string {
	i -= 1
	if i < 0 || i >= CellMsgID(len(_CellMsgIDIndex)-1) {
		return fmt.Sprintf("CellMsgID(%d)", i+1)
	}
	return _CellMsgIDName[_CellMsgIDIndex[i]:_CellMsgIDIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CellMsgIDNoOp() {
	var x [1]struct{}
	_ = x[CellMsgID_Start-(1)]
	_ = x[CellMsgID_PlayerLogin-(2)]
	_ = x[CellMsgID_PlayerLogout-(3)]
	_ = x[CellMsgID_End-(4)]
}

var _CellMsgIDValues = []CellMsgID{CellMsgID_Start, CellMsgID_PlayerLogin, CellMsgID_PlayerLogout, CellMsgID_End}

var _CellMsgIDNameToValueMap = map[string]CellMsgID{
	_CellMsgIDName[0:15]:       CellMsgID_Start,
	_CellMsgIDLowerName[0:15]:  CellMsgID_Start,
	_CellMsgIDName[15:36]:      CellMsgID_PlayerLogin,
	_CellMsgIDLowerName[15:36]: CellMsgID_PlayerLogin,
	_CellMsgIDName[36:58]:      CellMsgID_PlayerLogout,
	_CellMsgIDLowerName[36:58]: CellMsgID_PlayerLogout,
	_CellMsgIDName[58:71]:      CellMsgID_End,
	_CellMsgIDLowerName[58:71]: CellMsgID_End,
}

var _CellMsgIDNames = []string{
	_CellMsgIDName[0:15],
	_CellMsgIDName[15:36],
	_CellMsgIDName[36:58],
	_CellMsgIDName[58:71],
}

// CellMsgIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CellMsgIDString(s string) (CellMsgID, error) {
	if val, ok := _CellMsgIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CellMsgIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CellMsgID values", s)
}

// CellMsgIDValues returns all values of the enum
func CellMsgIDValues() []CellMsgID {
	return _CellMsgIDValues
}

// CellMsgIDStrings returns a slice of all String values of the enum
func CellMsgIDStrings() []string {
	strs := make([]string, len(_CellMsgIDNames))
	copy(strs, _CellMsgIDNames)
	return strs
}

// IsACellMsgID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CellMsgID) IsACellMsgID() bool {
	for _, v := range _CellMsgIDValues {
		if i == v {
			return true
		}
	}
	return false
}
