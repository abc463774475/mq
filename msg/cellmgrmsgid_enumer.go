// Code generated by "enumer -type=CellMgrMsgID"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const _CellMgrMsgIDName = "CellMgrMsgID_StartCellMgrMsgID_CellRegisterCellMgrMsgID_PlayerLoginCellMgrMsgID_PlayerChangeCellCellMgrMsgID_End"

var _CellMgrMsgIDIndex = [...]uint8{0, 18, 43, 67, 96, 112}

const _CellMgrMsgIDLowerName = "cellmgrmsgid_startcellmgrmsgid_cellregistercellmgrmsgid_playerlogincellmgrmsgid_playerchangecellcellmgrmsgid_end"

func (i CellMgrMsgID) String() string {
	i -= 1
	if i < 0 || i >= CellMgrMsgID(len(_CellMgrMsgIDIndex)-1) {
		return fmt.Sprintf("CellMgrMsgID(%d)", i+1)
	}
	return _CellMgrMsgIDName[_CellMgrMsgIDIndex[i]:_CellMgrMsgIDIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CellMgrMsgIDNoOp() {
	var x [1]struct{}
	_ = x[CellMgrMsgID_Start-(1)]
	_ = x[CellMgrMsgID_CellRegister-(2)]
	_ = x[CellMgrMsgID_PlayerLogin-(3)]
	_ = x[CellMgrMsgID_PlayerChangeCell-(4)]
	_ = x[CellMgrMsgID_End-(5)]
}

var _CellMgrMsgIDValues = []CellMgrMsgID{CellMgrMsgID_Start, CellMgrMsgID_CellRegister, CellMgrMsgID_PlayerLogin, CellMgrMsgID_PlayerChangeCell, CellMgrMsgID_End}

var _CellMgrMsgIDNameToValueMap = map[string]CellMgrMsgID{
	_CellMgrMsgIDName[0:18]:        CellMgrMsgID_Start,
	_CellMgrMsgIDLowerName[0:18]:   CellMgrMsgID_Start,
	_CellMgrMsgIDName[18:43]:       CellMgrMsgID_CellRegister,
	_CellMgrMsgIDLowerName[18:43]:  CellMgrMsgID_CellRegister,
	_CellMgrMsgIDName[43:67]:       CellMgrMsgID_PlayerLogin,
	_CellMgrMsgIDLowerName[43:67]:  CellMgrMsgID_PlayerLogin,
	_CellMgrMsgIDName[67:96]:       CellMgrMsgID_PlayerChangeCell,
	_CellMgrMsgIDLowerName[67:96]:  CellMgrMsgID_PlayerChangeCell,
	_CellMgrMsgIDName[96:112]:      CellMgrMsgID_End,
	_CellMgrMsgIDLowerName[96:112]: CellMgrMsgID_End,
}

var _CellMgrMsgIDNames = []string{
	_CellMgrMsgIDName[0:18],
	_CellMgrMsgIDName[18:43],
	_CellMgrMsgIDName[43:67],
	_CellMgrMsgIDName[67:96],
	_CellMgrMsgIDName[96:112],
}

// CellMgrMsgIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CellMgrMsgIDString(s string) (CellMgrMsgID, error) {
	if val, ok := _CellMgrMsgIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CellMgrMsgIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CellMgrMsgID values", s)
}

// CellMgrMsgIDValues returns all values of the enum
func CellMgrMsgIDValues() []CellMgrMsgID {
	return _CellMgrMsgIDValues
}

// CellMgrMsgIDStrings returns a slice of all String values of the enum
func CellMgrMsgIDStrings() []string {
	strs := make([]string, len(_CellMgrMsgIDNames))
	copy(strs, _CellMgrMsgIDNames)
	return strs
}

// IsACellMgrMsgID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CellMgrMsgID) IsACellMgrMsgID() bool {
	for _, v := range _CellMgrMsgIDValues {
		if i == v {
			return true
		}
	}
	return false
}
